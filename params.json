{
  "name": "Senboy",
  "tagline": "GameBoy/GameBoy Color emulator",
  "body": "# SenBoy [![Build Status](https://travis-ci.org/Senryoku/SenBoy.svg?branch=master)](https://travis-ci.org/Senryoku/SenBoy) \r\n\r\nGameBoy (Color) emulator.\r\n\r\nEmulation still has a few quirks (see issues), but compatibility is pretty good. This was developed as a side project and is by no means finished or polished.\r\n\r\nA web version (of v0.94) compiled to javascript via emscripten is available at http://senryoku.github.io/SenBoyWeb/. \r\n\r\n## Screenshots\r\n\r\n<img src=\"http://senryoku.github.io/data/img/SenBoy/SenBoy_Zelda_1.png\" width=350 /> <img src=\"http://senryoku.github.io/data/img/SenBoy/SenBoy_Kirby_1.png\" width=350 />\r\n\r\n<img src=\"http://senryoku.github.io/data/img/SenBoy/SenBoy_CustomBoot.png\" width=350 /> <img src=\"http://senryoku.github.io/data/img/SenBoy/SenBoy_Debug_1.png\" width=350 />\r\n\r\n## Compilation\r\n\r\nYou will need a fairly recent compiler, meaning with C++14 and std::experimental::filesystem support. Compilation is manually being tested on Windows (MinGW) with g++ 6.1.0, but Linux with g++5 or more should be fine (see Travis CI). I have no way to test OSX, so if you know how to setup a OSX compiler fulfilling these constraints on Travis, please tell me!\r\n\r\nYou will need CMake and a copy of SFML 2.X (see Dependencies). On Windows, or if you used a non standard install path, you may want to set the CMake variables `CMAKE_PREFIX_PATH` to where are stored the SFML libraries and `SFML_INCLUDE_DIR` to the folder containing the SFML headers (using cmake-gui or the command line). Once this done, this should be enough:\r\n````\r\ncmake .\r\nmake\r\n````\r\n## Usage\r\n\r\nSenBoy now have a basic GUI! Yay! Bring it up (or hide it) by pressing Escape or Enter.\r\n\r\nYou can also pass a rom path via the command line to run it :\r\n````\r\n./SenBoy path/to/the/rom [options]\r\n````\r\n\r\nOption\t\t\t| Effect\r\n----------------|--------\r\n-d\t\t\t\t| Start in debug mode\r\n-b\t\t\t\t| Skip Boot ROM\r\n-s\t\t\t\t| Disable sound\r\n--dmg \t\t\t| Force execution in original GameBoy mode\r\n--cgb \t\t\t| Force execution in GameBoy Color mode\r\n\r\nControls uses any connected Joystick, or the keyboard. There is no way to configure it !\r\nValues are hard coded to match a Xbox360/XboxOne controller and the keyboard uses the following mapping: \r\n\r\nGameboy Button\t| Keyboard Key\r\n----------------|--------------\r\nA\t\t\t\t| F\r\nB\t\t\t\t| G\r\nSelect\t\t\t| H\r\nStart\t\t\t| J\r\nUp\t\t\t\t| Up Arrow\r\nDown\t\t\t| Down Arrow\r\nLeft\t\t\t| Left Arrow\r\nRight\t\t\t| Right Arrow\r\n\r\nWhen SenBoy is running, the following shortcuts are available:\r\n\r\nKey\t\t\t\t| Action\r\n----------------|--------\r\nEscape/Enter\t| Show/Hide GUI\r\nBackspace\t\t| Reset\r\nSpace\t\t\t| Advance one instruction (in debug)\r\nM\t\t\t\t| Toggle Real Speed\r\nD \t\t\t\t| Toggle Debugging (Halt Execution)\r\nL\t\t\t\t| Advance one frame\r\nN\t\t\t\t| Clear all breakpoints\r\nP \t\t\t\t| Toggle Post-process (nothing)\r\nNumPad +\t\t| Volume Up\r\nNumPad -\t\t| Volume Down\r\nAlt+Enter  \t \t| Toggle Fullscreen\r\nCtrl+S   \t\t| Save (saves RAM to disk)\r\nCtrl+Q   \t\t| Quit\r\n\r\n## TODO\r\n* Gameboy Color Mode\r\n  * Debugging (Crash in Pokemon Crystal? See Issues)\r\n  * DMG Games in CGB mode (Correct compatibility mode; some sprites disappears)\r\n* Application debugging (See Issues)\r\n* (Other Mappers? What popular games uses other mappers than MBC1/3/5?)\r\n* (Constant coding style...)\r\n\r\n## Tests\r\n\r\nBlargg's cpu_instrs individual tests:\r\n\r\nTest\t\t\t\t\t| Status\r\n------------------------|--------\r\n01-special\t\t\t\t| :white_check_mark: PASS\r\n02-interrupts\t\t\t| :white_check_mark: PASS\r\n03-op sp,hl\t\t\t\t| :white_check_mark: PASS\r\n04-op r,imm\t\t\t\t| :white_check_mark: PASS\r\n05-op rp\t\t\t\t| :white_check_mark: PASS\r\n06-ld r,r\t\t\t\t| :white_check_mark: PASS\r\n07-jr,jp,call,ret,rst\t| :white_check_mark: PASS\r\n08-misc instrs\t\t\t| :white_check_mark: PASS\r\n09-op r,r\t\t\t\t| :white_check_mark: PASS\r\n10-bit ops\t\t\t\t| :white_check_mark: PASS\r\n11-op a,(hl)\t\t\t| :white_check_mark: PASS\r\ninstr_timing\t\t\t| :white_check_mark: PASS\r\n01-read_timing\t\t\t| :x: FAIL\r\n02-write_timing\t\t\t| :x: FAIL\r\n03-modify_timing\t\t| :x: FAIL\r\ninterrupt_time\t\t\t| :white_check_mark: PASS\r\nhalt_bug\t\t\t\t| :x: FAIL\r\n\r\nSenBoy is NOT sub-instruction accurate.\r\n\r\n## Dependencies\r\n* [SFML 2.X](http://www.sfml-dev.org/) for graphical output and input handling.\r\n* [Gb_Snd_Emu-0.1.4](http://blargg.8bitalley.com/libs/audio.html#Gb_Snd_Emu) for sound emulation (Included).\r\n* [dear imgui](https://github.com/ocornut/imgui) (Included)\r\n* [imgui-sfml](https://github.com/eliasdaler/imgui-sfml) (Included)\r\n\r\n## Thanks\r\n* http://gbdev.gg8.se/ for their awesome wiki.\r\n* Shay 'Blargg' Green for his tests roms, his Gb_Snd_Emu library and all his contributions to the emulation scene!\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}